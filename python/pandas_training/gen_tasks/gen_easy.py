from nbformat import v4 as nbf_v4
import nbformat
import os

base_dir = os.path.dirname(os.path.abspath(__name__))
target_dir = os.path.join(base_dir, './python/pandas_training', 'tasks')
os.makedirs(target_dir, exist_ok=True)

notebook_path = os.path.join(target_dir, 'easy.ipynb')

# Начальная ячейка с импортами
intro_cells = [
    nbf_v4.new_markdown_cell("# Тренировка работы с pandas\nВ этом ноутбуке представлены 40 заданий по работе с pandas на основе датасета Titanic."),
    nbf_v4.new_code_cell("import pandas as pd\nimport numpy as np")
]

# Список описаний заданий
task_descriptions = [
    "Загрузите датасет Titanic из CSV-файла `train.csv` в переменную `df`. Убедитесь, что данные загружаются в виде DataFrame.",
    "Получите основную информацию о DataFrame, используя метод `info()`. Сохраните результат в переменную `info_result`.",
    "Получите список столбцов DataFrame и сохраните его в переменную `columns`.",
    "Вычислите описательную статистику DataFrame с помощью метода `describe()` и сохраните результат в переменную `stats`.",
    "Подсчитайте количество пропущенных значений в каждом столбце. Результат сохраните в переменную `missing_values`.",
    "Определите типы данных каждого столбца. Сохраните результат в переменную `dtypes`.",
    "Выберите несколько (не все) столбцов из DataFrame и сохраните их в переменную `selected_columns`.",
    "Выведите первые и последние строки таблицы с помощью методов `head()` и `tail()`. Сохраните их в переменные `head_rows` и `tail_rows`.",
    "Получите случайную выборку строк из DataFrame. Сохраните результат в переменную `sample_df`.",
    "Получите уникальные значения из одного из столбцов (например, 'Sex') и сохраните в переменную `unique_values`.",
    "Подсчитайте частоту значений в одном из столбцов (например, 'Pclass') и сохраните результат в переменную `value_counts`.",
    "Отфильтруйте строки DataFrame по значению в одном из столбцов (например, пассажиры класса 1). Результат сохраните в `filtered_df`.",
    "Примените сразу несколько фильтров (например, пассажиры женского пола старше 30 лет). Сохраните результат в `multi_filtered_df`.",
    "Отсортируйте DataFrame по одному из числовых столбцов (например, 'Fare'). Сохраните результат в `sorted_df`.",
    "Сбросьте индекс в DataFrame и сохраните результат в `reset_index_df`.",
    "Переименуйте хотя бы один столбец (например, 'Sex' на 'Gender'). Сохраните изменённый DataFrame в переменную `renamed_df`.",
    "Добавьте новый столбец в DataFrame, основанный на вычислениях (например, удвоенное значение Fare). Сохраните результат в `calculated_df`.",
    "Примените функцию к значениям одного из столбцов с помощью метода `apply()`. Сохраните результат в `applied_df`.",
    "Выведите описательную статистику для одного столбца (например, 'Age') и сохраните в переменную `column_stats`.",
    "Сгруппируйте данные по какому-либо признаку и посчитайте количество элементов в каждой группе (например, по 'Embarked'). Сохраните результат в `group_counts`.",
    "Создайте маску, указывающую на пропущенные значения с помощью метода `isnull()`. Сохраните результат в `null_mask`.",
    "Удалите один или несколько столбцов из DataFrame. Результат сохраните в переменной `dropped_df`.",
    "Удалите дубликаты из DataFrame с помощью метода `drop_duplicates()`. Сохраните результат в `no_duplicates_df`.",
    "Отфильтруйте строки с помощью метода `query()`. Сохраните результат в переменную `query_result`.",
    "Используйте булеву индексацию для фильтрации данных. Результат сохраните в переменную `boolean_index_result`.",
    "Преобразуйте типы данных в одном или нескольких столбцах с помощью метода `astype()`. Сохраните результат в `converted_df`.",
    "Преобразуйте один или несколько столбцов в категориальный тип данных. Сохраните результат в `categorical_df`.",
    "Проверьте наличие дубликатов строк с помощью метода `duplicated()`. Сохраните булеву маску в переменную `duplicates_mask`.",
    "Используйте `loc` для доступа к данным (например, выбор строк по меткам). Сохраните результат в `loc_result`.",
    "Используйте `iloc` для доступа к данным (например, выбор строк по индексам). Сохраните результат в `iloc_result`.",
    "Округлите значения в числовых столбцах до целых чисел с помощью метода `round()`. Сохраните результат в `rounded_df`.",
    "Создайте копию DataFrame с помощью метода `copy()`. Сохраните результат в `df_copy`.",
    "Преобразуйте DataFrame в массив NumPy. Сохраните результат в `numpy_array`.",
    "Замените значения в одном из столбцов (например, 'male' на 'M', 'female' на 'F'). Сохраните результат в `replaced_df`.",
    "Получите размерность DataFrame с помощью свойства `shape`. Сохраните результат в `df_shape`.",
    "Используйте метод `between()` для фильтрации строк по диапазону значений. Сохраните результат в `between_result`.",
    "Добавьте новый столбец в DataFrame с произвольными данными. Сохраните результат в `df_with_new_column`.",
    "Примените строковые методы (например, `str.lower()` или `str.contains()`) к одному из текстовых столбцов. Сохраните результат в `string_processed_df`.",
    "Сохраните DataFrame в CSV-файл с помощью метода `to_csv()`. Убедитесь, что файл сохранился. Можно сохранить флаг в переменную `csv_saved = True`.",
    "Оцените объём памяти, занимаемый DataFrame, с помощью метода `memory_usage()` или `memory_usage(deep=True)`. Сохраните результат в переменную `memory_usage`."
]

# Добавляем задания
task_cells = []
for i, desc in enumerate(task_descriptions, 1):
    task_cells.append(nbf_v4.new_markdown_cell(f"## Задание {i}\n{desc}"))
    task_cells.append(nbf_v4.new_code_cell("# Ваш код здесь"))

# Собираем ноутбук
notebook = nbf_v4.new_notebook(cells=intro_cells + task_cells)

# Сохраняем в файл
with open(notebook_path, "w", encoding="utf-8") as f:
    nbformat.write(notebook, f)

print(f"✅ Файл сохранён в: {notebook_path}")
